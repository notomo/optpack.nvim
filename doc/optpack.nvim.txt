*optpack.nvim.txt*

==============================================================================
Lua module: optpack                                     *optpack.nvim-optpack*

add({full_name}, {opts})                                       *optpack.add()*
  Add a plugin.

  Parameters: ~
    {full_name} (string) {account_name}/{plugin_name} format
    {opts} (OptpackAddOption?) |OptpackAddOption|

  Return: ~
    (OptpackPlugin) added |OptpackPlugin|

list()                                                        *optpack.list()*
  Returns list of plugins.

  Return: ~
    (OptpackPlugin[]) list of |OptpackPlugin|

get({plugin_name})                                             *optpack.get()*
  Returns a plugin.

  Parameters: ~
    {plugin_name} (string) 

  Return: ~
    (OptpackPlugin) |OptpackPlugin|

install({opts})                                            *optpack.install()*
  Install plugins.

  Parameters: ~
    {opts} (OptpackInstallOrUpdateOption?) |OptpackInstallOrUpdateOption|

update({opts})                                              *optpack.update()*
  Update plugins.

  Parameters: ~
    {opts} (OptpackInstallOrUpdateOption?) |OptpackInstallOrUpdateOption|

load({plugin_name}, {opts})                                   *optpack.load()*
  Load a plugin.

  Parameters: ~
    {plugin_name} (string) 
    {opts} (OptpackLoadOption?) |OptpackLoadOption|

set_default({setting})                                 *optpack.set_default()*
  Set default setting.

  Parameters: ~
    {setting} (OptpackSetting) |OptpackSetting|

==============================================================================
STRUCTURE                                             *optpack.nvim-STRUCTURE*

OptpackAddOption                                            *OptpackAddOption*

- {depends} (string[]?) dependency plugin (not full) names. These will be loaded before. default: {}
- {enabled} (boolean?) if enabled=false, optpack ignores the plugin. default: true
- {package_name} (string?) used as the package directory name. your-packpath/pack/{package_name}/opt default: "optpack"
- {select_packpath} ((fun():string)?) returns a directory path. default: returns the first element of 'packpath'
- {fetch} (OptpackAddOptionFetch?) |OptpackAddOptionFetch|
- {hooks} (OptpackAddOptionHooks?) |OptpackAddOptionHooks|
- {load_on} (OptpackAddOptionLoadOn?) |OptpackAddOptionLoadOn|

OptpackAddOptionFetch                                  *OptpackAddOptionFetch*

- {base_url} (string?) A git server base url, default: "https://github.com"
- {depth} (integer?) for shallow clone depth. Used full clone if depth < 1. default: 1
- {version} (string?) git branch, tag default: default branch

OptpackAddOptionHooks                                  *OptpackAddOptionHooks*

- {post_add} ((fun(plugin:OptpackPlugin)|table)?) called on after |optpack.add()|
- {pre_load} ((fun(plugin:OptpackPlugin)|table)?) called on before loading
- {post_install} ((fun(plugin:OptpackPlugin)|table)?) called on after installing
- {post_update} ((fun(plugin:OptpackPlugin)|table)?) called on after updating
- {post_load} ((fun(plugin:OptpackPlugin)|table)?) called on after loading

OptpackAddOptionLoadOn                                *OptpackAddOptionLoadOn*

- {cmds} (string[]?) EX command pattern list, default: {}
- {events} ((string|string[])[]?) autocmd event name or [name, pattern] list, default: {}
- {filetypes} (string[]?) file type pattern list, default: {}
- {keymaps} ((fun(vim:table)|table)?) set keymap function. (The argument is patched vim object)
    example: function(vim) vim.keymap.set("n", "S", "<Plug>(example)") end
    default: function() end
- {modules} (string[]?) for require() lua module name list, default: {}

OptpackPlugin                                                  *OptpackPlugin*

- {directory} (string) full path of the plugin directory
- {full_name} (string) {account_name}/{plugin_name} format plugin name
- {name} (string) plugin name
- {url} (string) git repository url
- {version} (string?) git branch, tag
- {opts} (OptpackAddOption) |OptpackAddOption|

OptpackInstallOrUpdateOption                    *OptpackInstallOrUpdateOption*

- {on_finished} ((fun(plugin:OptpackPlugin)|table)?) called on finished updating or installing
- {outputters} (OptpackOutputters?) outputter settings
- {parallel} (OptpackParallelOption?) parallel setting
- {pattern} (string?) target plugin name pattern for vim regex, default: ".*"

OptpackOutputters                                          *OptpackOutputters*

- {buffer} (OptpackBufferOutputter?) |OptpackBufferOutputter|
- {echo} (OptpackEchoOutputter?) |OptpackEchoOutputter|
- {log} (OptpackLogOutputter?) |OptpackLogOutputter|

OptpackBufferOutputter                                *OptpackBufferOutputter*

- {enabled} (boolean?) used if true. default: true
- {open} ((fun(bufnr:integer)|table)?) open buffer

OptpackEchoOutputter                                    *OptpackEchoOutputter*

- {enabled} (boolean?) used if true. default: true

OptpackLogOutputter                                      *OptpackLogOutputter*

- {enabled} (boolean?) used if true. default: true
- {path} (string?) log file path: default: vim.fn.stdpath("cache")/optpack-update.log

OptpackParallelOption                                  *OptpackParallelOption*

- {limit} (integer?) max number for parallel job, default: 8

OptpackLoadOption                                          *OptpackLoadOption*

- {on_finished} ((fun(plugin:OptpackPlugin)|table)?) called on finished loading plugin

OptpackSetting                                                *OptpackSetting*

- {add} (OptpackAddOption?) |OptpackAddOption|
- {install_or_update} (OptpackInstallOrUpdateOption?) |OptpackInstallOrUpdateOption|

==============================================================================
EXAMPLES                                               *optpack.nvim-EXAMPLES*

>lua
  local pack_dir = vim.fn.stdpath("data") .. "/optpack.nvim"
  vim.opt.packpath:prepend(pack_dir)
  local manager_dir = pack_dir .. "/pack/optpack/opt/optpack.nvim"
  local initializing = vim.fn.isdirectory(manager_dir) ~= 1
  if initializing then
    vim.cmd["!"]({ args = { "git", "clone", "https://github.com/notomo/optpack.nvim", manager_dir } })
  end

  vim.cmd.packadd("optpack.nvim")
  local optpack = require("optpack")

  -- add some plugins
  optpack.add("notomo/optpack.nvim")
  optpack.add("notomo/ignored", { enabled = false })
  optpack.add("notomo/gesture.nvim", {
    load_on = { modules = { "gesture" } }, -- load on `require("gesture")`
    hooks = {
      post_add = function()
        -- mapping
      end,
      post_load = function()
        -- setting after loading
      end,
    },
  })
  optpack.add("notomo/vusted", {
    fetch = { depth = 0 }, -- fetch including history
  })

  if initializing then
    optpack.update()
  end
<

==============================================================================
vim:tw=78:ts=8:ft=help
